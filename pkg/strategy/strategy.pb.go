// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin 0.9.0
// 	protoc               v5.29.3
// source: strategy.proto

package strategy

import (
	context "context"
	timestamppb "github.com/knqyf263/go-plugin/types/known/timestamppb"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// MarketData represents the market data for a single point in time
type MarketData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol    string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Price     float64                `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"`
	Volume    float64                `protobuf:"fixed64,3,opt,name=volume,proto3" json:"volume,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *MarketData) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *MarketData) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *MarketData) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *MarketData) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *MarketData) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// StrategyContext contains all the context needed for strategy execution
type StrategyContext struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DataSource provides the market data as well as the historical data
	DataSource string `protobuf:"bytes,1,opt,name=data_source,json=dataSource,proto3" json:"data_source,omitempty"`
	// IndicatorRegistry is the registry of all indicators
	IndicatorRegistry string `protobuf:"bytes,2,opt,name=indicator_registry,json=indicatorRegistry,proto3" json:"indicator_registry,omitempty"`
	// Cache is the cache of the strategy
	Cache string `protobuf:"bytes,3,opt,name=cache,proto3" json:"cache,omitempty"`
	// Trading System is used to place orders
	TradingSystem string `protobuf:"bytes,4,opt,name=trading_system,json=tradingSystem,proto3" json:"trading_system,omitempty"`
	// Marker is used to mark a point in time with a signal and a reason
	Marker string `protobuf:"bytes,5,opt,name=marker,proto3" json:"marker,omitempty"`
}

func (x *StrategyContext) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *StrategyContext) GetDataSource() string {
	if x != nil {
		return x.DataSource
	}
	return ""
}

func (x *StrategyContext) GetIndicatorRegistry() string {
	if x != nil {
		return x.IndicatorRegistry
	}
	return ""
}

func (x *StrategyContext) GetCache() string {
	if x != nil {
		return x.Cache
	}
	return ""
}

func (x *StrategyContext) GetTradingSystem() string {
	if x != nil {
		return x.TradingSystem
	}
	return ""
}

func (x *StrategyContext) GetMarker() string {
	if x != nil {
		return x.Marker
	}
	return ""
}

// HistoricalDataRequest is used to request historical data
type HistoricalDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol    string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	StartTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	EndTime   *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=end_time,json=endTime,proto3" json:"end_time,omitempty"`
}

func (x *HistoricalDataRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *HistoricalDataRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *HistoricalDataRequest) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *HistoricalDataRequest) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

// HistoricalDataResponse contains the historical data
type HistoricalDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []*MarketData `protobuf:"bytes,1,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *HistoricalDataResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *HistoricalDataResponse) GetData() []*MarketData {
	if x != nil {
		return x.Data
	}
	return nil
}

// OrderRequest is used to place an order
type OrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol    string  `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	OrderType string  `protobuf:"bytes,2,opt,name=order_type,json=orderType,proto3" json:"order_type,omitempty"`
	Quantity  float64 `protobuf:"fixed64,3,opt,name=quantity,proto3" json:"quantity,omitempty"`
	Price     float64 `protobuf:"fixed64,4,opt,name=price,proto3" json:"price,omitempty"`
}

func (x *OrderRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *OrderRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *OrderRequest) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *OrderRequest) GetQuantity() float64 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *OrderRequest) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

// OrderResponse contains the order response
type OrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderId string `protobuf:"bytes,1,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *OrderResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *OrderResponse) GetOrderId() string {
	if x != nil {
		return x.OrderId
	}
	return ""
}

func (x *OrderResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *OrderResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// SignalRequest is used to mark a signal
type SignalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Symbol     string                 `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	SignalType string                 `protobuf:"bytes,2,opt,name=signal_type,json=signalType,proto3" json:"signal_type,omitempty"`
	Reason     string                 `protobuf:"bytes,3,opt,name=reason,proto3" json:"reason,omitempty"`
	Timestamp  *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *SignalRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *SignalRequest) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *SignalRequest) GetSignalType() string {
	if x != nil {
		return x.SignalType
	}
	return ""
}

func (x *SignalRequest) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

func (x *SignalRequest) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// SignalResponse contains the signal response
type SignalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *SignalResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *SignalResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SignalResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// InitializeRequest contains the configuration for strategy initialization
type InitializeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config string `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *InitializeRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *InitializeRequest) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

// InitializeResponse contains the initialization response
type InitializeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *InitializeResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *InitializeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *InitializeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// ProcessDataRequest contains the market data to process
type ProcessDataRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Context *StrategyContext `protobuf:"bytes,1,opt,name=context,proto3" json:"context,omitempty"`
	Data    *MarketData      `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ProcessDataRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *ProcessDataRequest) GetContext() *StrategyContext {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *ProcessDataRequest) GetData() *MarketData {
	if x != nil {
		return x.Data
	}
	return nil
}

// ProcessDataResponse contains the processing response
type ProcessDataResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *ProcessDataResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *ProcessDataResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ProcessDataResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// NameRequest is an empty request for getting the strategy name
type NameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NameRequest) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

// NameResponse contains the strategy name
type NameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NameResponse) ProtoReflect() protoreflect.Message {
	panic(`not implemented`)
}

func (x *NameResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// HostFunctions defines the functions that the host provides to the plugin
// go:plugin type=host
type HostFunctions interface {
	// GetHistoricalData retrieves historical market data
	GetHistoricalData(context.Context, *HistoricalDataRequest) (*HistoricalDataResponse, error)
	// PlaceOrder places an order through the trading system
	PlaceOrder(context.Context, *OrderRequest) (*OrderResponse, error)
	// MarkSignal marks a point in time with a signal and reason
	MarkSignal(context.Context, *SignalRequest) (*SignalResponse, error)
}

// TradingStrategy defines the interface for trading strategies
// go:plugin type=plugin version=1
type TradingStrategy interface {
	// Initialize sets up the strategy with a configuration string
	Initialize(context.Context, *InitializeRequest) (*InitializeResponse, error)
	// ProcessData processes new market data and generates signals
	ProcessData(context.Context, *ProcessDataRequest) (*ProcessDataResponse, error)
	// Name returns the name of the strategy
	Name(context.Context, *NameRequest) (*NameResponse, error)
}
