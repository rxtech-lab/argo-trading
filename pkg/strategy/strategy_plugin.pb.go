//go:build wasip1

// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin 0.9.0
// 	protoc               v5.29.3
// source: strategy.proto

package strategy

import (
	context "context"
	wasm "github.com/knqyf263/go-plugin/wasm"
	_ "unsafe"
)

const TradingStrategyPluginAPIVersion = 1

//go:wasmexport trading_strategy_api_version
func _trading_strategy_api_version() uint64 {
	return TradingStrategyPluginAPIVersion
}

var tradingStrategy TradingStrategy

func RegisterTradingStrategy(p TradingStrategy) {
	tradingStrategy = p
}

//go:wasmexport trading_strategy_initialize
func _trading_strategy_initialize(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(InitializeRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := tradingStrategy.Initialize(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//go:wasmexport trading_strategy_process_data
func _trading_strategy_process_data(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(ProcessDataRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := tradingStrategy.ProcessData(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//go:wasmexport trading_strategy_name
func _trading_strategy_name(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(NameRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := tradingStrategy.Name(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

type hostFunctions struct{}

func NewHostFunctions() HostFunctions {
	return hostFunctions{}
}

//go:wasmimport env get_historical_data
func _get_historical_data(ptr uint32, size uint32) uint64

func (h hostFunctions) GetHistoricalData(ctx context.Context, request *HistoricalDataRequest) (*HistoricalDataResponse, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _get_historical_data(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(HistoricalDataResponse)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env place_order
func _place_order(ptr uint32, size uint32) uint64

func (h hostFunctions) PlaceOrder(ctx context.Context, request *OrderRequest) (*OrderResponse, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _place_order(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(OrderResponse)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env mark_signal
func _mark_signal(ptr uint32, size uint32) uint64

func (h hostFunctions) MarkSignal(ctx context.Context, request *SignalRequest) (*SignalResponse, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _mark_signal(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(SignalResponse)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}
