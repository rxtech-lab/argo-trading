//go:build wasip1

// Code generated by protoc-gen-go-plugin. DO NOT EDIT.
// versions:
// 	protoc-gen-go-plugin v0.1.0
// 	protoc               v5.29.3
// source: strategy.proto

package strategy

import (
	context "context"
	emptypb "github.com/knqyf263/go-plugin/types/known/emptypb"
	wasm "github.com/knqyf263/go-plugin/wasm"
	_ "unsafe"
)

const TradingStrategyPluginAPIVersion = 1

//go:wasmexport trading_strategy_api_version
func _trading_strategy_api_version() uint64 {
	return TradingStrategyPluginAPIVersion
}

var tradingStrategy TradingStrategy

func RegisterTradingStrategy(p TradingStrategy) {
	tradingStrategy = p
}

//go:wasmexport trading_strategy_initialize
func _trading_strategy_initialize(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(InitializeRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := tradingStrategy.Initialize(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//go:wasmexport trading_strategy_process_data
func _trading_strategy_process_data(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(ProcessDataRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := tradingStrategy.ProcessData(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

//go:wasmexport trading_strategy_name
func _trading_strategy_name(ptr, size uint32) uint64 {
	b := wasm.PtrToByte(ptr, size)
	req := new(NameRequest)
	if err := req.UnmarshalVT(b); err != nil {
		return 0
	}
	response, err := tradingStrategy.Name(context.Background(), req)
	if err != nil {
		ptr, size = wasm.ByteToPtr([]byte(err.Error()))
		return (uint64(ptr) << uint64(32)) | uint64(size) |
			// Indicate that this is the error string by setting the 32-th bit, assuming that
			// no data exceeds 31-bit size (2 GiB).
			(1 << 31)
	}

	b, err = response.MarshalVT()
	if err != nil {
		return 0
	}
	ptr, size = wasm.ByteToPtr(b)
	return (uint64(ptr) << uint64(32)) | uint64(size)
}

type strategyApi struct{}

func NewStrategyApi() StrategyApi {
	return strategyApi{}
}

//go:wasmimport env get_range
func _get_range(ptr uint32, size uint32) uint64

func (h strategyApi) GetRange(ctx context.Context, request *GetRangeRequest) (*GetRangeResponse, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _get_range(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(GetRangeResponse)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env read_last_data
func _read_last_data(ptr uint32, size uint32) uint64

func (h strategyApi) ReadLastData(ctx context.Context, request *ReadLastDataRequest) (*MarketData, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _read_last_data(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(MarketData)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env execute_sql
func _execute_sql(ptr uint32, size uint32) uint64

func (h strategyApi) ExecuteSQL(ctx context.Context, request *ExecuteSQLRequest) (*ExecuteSQLResponse, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _execute_sql(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(ExecuteSQLResponse)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env count
func _count(ptr uint32, size uint32) uint64

func (h strategyApi) Count(ctx context.Context, request *CountRequest) (*CountResponse, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _count(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(CountResponse)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env configure_indicator
func _configure_indicator(ptr uint32, size uint32) uint64

func (h strategyApi) ConfigureIndicator(ctx context.Context, request *ConfigureRequest) (*emptypb.Empty, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _configure_indicator(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(emptypb.Empty)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env get_signal
func _get_signal(ptr uint32, size uint32) uint64

func (h strategyApi) GetSignal(ctx context.Context, request *GetSignalRequest) (*GetSignalResponse, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _get_signal(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(GetSignalResponse)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env get_cache
func _get_cache(ptr uint32, size uint32) uint64

func (h strategyApi) GetCache(ctx context.Context, request *GetRequest) (*GetResponse, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _get_cache(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(GetResponse)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env set_cache
func _set_cache(ptr uint32, size uint32) uint64

func (h strategyApi) SetCache(ctx context.Context, request *SetRequest) (*emptypb.Empty, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _set_cache(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(emptypb.Empty)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env place_order
func _place_order(ptr uint32, size uint32) uint64

func (h strategyApi) PlaceOrder(ctx context.Context, request *ExecuteOrder) (*emptypb.Empty, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _place_order(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(emptypb.Empty)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env place_multiple_orders
func _place_multiple_orders(ptr uint32, size uint32) uint64

func (h strategyApi) PlaceMultipleOrders(ctx context.Context, request *PlaceMultipleOrdersRequest) (*emptypb.Empty, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _place_multiple_orders(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(emptypb.Empty)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env get_positions
func _get_positions(ptr uint32, size uint32) uint64

func (h strategyApi) GetPositions(ctx context.Context, request *emptypb.Empty) (*GetPositionsResponse, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _get_positions(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(GetPositionsResponse)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env get_position
func _get_position(ptr uint32, size uint32) uint64

func (h strategyApi) GetPosition(ctx context.Context, request *GetPositionRequest) (*Position, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _get_position(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(Position)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env cancel_order
func _cancel_order(ptr uint32, size uint32) uint64

func (h strategyApi) CancelOrder(ctx context.Context, request *CancelOrderRequest) (*emptypb.Empty, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _cancel_order(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(emptypb.Empty)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env cancel_all_orders
func _cancel_all_orders(ptr uint32, size uint32) uint64

func (h strategyApi) CancelAllOrders(ctx context.Context, request *emptypb.Empty) (*emptypb.Empty, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _cancel_all_orders(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(emptypb.Empty)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env get_order_status
func _get_order_status(ptr uint32, size uint32) uint64

func (h strategyApi) GetOrderStatus(ctx context.Context, request *GetOrderStatusRequest) (*GetOrderStatusResponse, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _get_order_status(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(GetOrderStatusResponse)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env mark
func _mark(ptr uint32, size uint32) uint64

func (h strategyApi) Mark(ctx context.Context, request *MarkRequest) (*emptypb.Empty, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _mark(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(emptypb.Empty)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}

//go:wasmimport env get_markers
func _get_markers(ptr uint32, size uint32) uint64

func (h strategyApi) GetMarkers(ctx context.Context, request *emptypb.Empty) (*GetMarkersResponse, error) {
	buf, err := request.MarshalVT()
	if err != nil {
		return nil, err
	}
	ptr, size := wasm.ByteToPtr(buf)
	ptrSize := _get_markers(ptr, size)
	wasm.Free(ptr)

	ptr = uint32(ptrSize >> 32)
	size = uint32(ptrSize)
	buf = wasm.PtrToByte(ptr, size)

	response := new(GetMarkersResponse)
	if err = response.UnmarshalVT(buf); err != nil {
		return nil, err
	}
	return response, nil
}
